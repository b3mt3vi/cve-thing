import requests
from bs4 import BeautifulSoup
import time 
import argparse
import os
import re


NVD_BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0" 

def find_exploitdb_references(exploitdb_dir, cve_id):
    """Searches the local Exploit-DB directory for potential exploit files related to a CVE-ID."""

    exploit_paths = []
    cve_regex = re.compile(rf"CVE-\d+-\d+({cve_id})", re.IGNORECASE)  # Case-insensitive matching for CVE-ID
    for root, _, filenames in os.walk(exploitdb_dir):
        for filename in filenames:
            if cve_regex.search(filename):
                exploit_paths.append(os.path.join(root, filename))
    return exploit_paths

def get_cve_details(cve_id):
    url = f"{NVD_BASE_URL}?cveId={cve_id}"
    response = requests.get(url)
    response.raise_for_status()  
    return response.json()

def extract_vendors(cve_data):
    """Extracts potential vendor names from NVD's CVE data. Handles cases where 'affects' key might be missing."""
    vendor_data = cve_data.get('vulnerabilities', [{}])[0].get('cve', {}).get('affects', {}).get('vendor', {}).get('vendor_data', [])
    return [vendor['vendor_name'] for vendor in vendor_data] 


def get_top_results(html_content, num_results=3):
    soup = BeautifulSoup(html_content, 'html.parser')
    result_divs = soup.find_all('div', class_='result')[:num_results] 
    return [result_div.find('a')['href'] for result_div in result_divs if result_div.find('a')] 

def find_vendor_advisory(cve_data):
    vendors = extract_vendors(cve_data)
    for vendor in vendors:
        search_url = f"https://www.google.com/search?q={vendor}+security+bulletins+{cve_data['vulnerabilities'][0]['cve']['id']}"
        response = requests.get(search_url)
        response.raise_for_status()

        top_links = get_top_results(response.content)
        if top_links:
            return top_links
        time.sleep(2)  
    return None  

def generate_refined_searches(cve_id):
    keywords = ["exploit", "analysis", "technical writeup", "PoC"] 
    for keyword in keywords:
        yield f"https://www.google.com/search?q={cve_id}+{keyword}"

def format_output(cve_data, output_format='text'):
    output_lines = []
    cve_id = cve_data['vulnerabilities'][0]['cve']['id']
    description = cve_data['vulnerabilities'][0]['cve']['descriptions'][0]['value']  
    references = [ref['url'] for ref in cve_data['vulnerabilities'][0]['cve']['references']] 
    exploitdb_dir = "./exploitdb"

    exploit_paths = find_exploitdb_references(exploitdb_dir, cve_id)

    # write if exploit paths


    output_lines.append(f"CVE-ID: {cve_id}")
    output_lines.append(f"Description: {description}\n")
    output_lines.append("References:")
    for ref in references:
        output_lines.append(f"  - {ref}")

    output_lines.append("\nVendor Advisories:")  
    advisories = find_vendor_advisory(cve_data)
    if advisories:
        for link in advisories:
            output_lines.append(f"  - {link}")
    else:
        output_lines.append("  - Not Found")

    output_lines.append("\nAdditional Analysis Links:")
    for search_url in generate_refined_searches(cve_id):
        response = requests.get(search_url)
        response.raise_for_status()
        output_lines.append(f"  - Potential Analysis Links via Google Search: {search_url}") 

    output_lines.append("\n") 

    return "\n".join(output_lines) if output_format == 'text' else "<ul>" + "".join(f"<li>{line}</li>" for line in output_lines)  + "</ul>" 

def load_cves_from_file(filename: str) -> list:
    """Loads CVE IDs from a text file."""

    with open(filename, "r") as f:
        cves = [line.strip() for line in f]
    return cves

def main():
    parser = argparse.ArgumentParser(description="Enrich CVEs from a file.")
    parser.add_argument("-i", "--input", required=True, help="Input file containing CVEs (one per line)")
    parser.add_argument("-o", "--output", help="Output file name (default: output.txt or output.html)")
    parser.add_argument("-f", "--format", choices=['text', 'html'], default='text', help="Output format (default: text)")
    args = parser.parse_args()

    cves = load_cves_from_file(args.input)

    for cve_id in cves:
        cve_data = get_cve_details(cve_id)
        output_data = format_output(cve_data, output_format=args.format)

        output_file = args.output or f"output.{args.format}"  

        with open(output_file, 'a') as f:  # Append mode
            f.write(output_data) 

if __name__ == "__main__":
    print("CVE Thing") 
    main()
